[build-system]
requires = ["setuptools>=45.0", "setuptools_scm[toml]>=6.3.1", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sysidentpy"
description = "A Python Package For System Identification Using NARMAX Models"
readme = "README.md"
requires-python = ">=3.8,<3.13"
license = { file = "LICENSE" }
keywords = [
    "data-science",
    "forecasting",
    "NARMAX",
    "NARX",
    "system-identification",
    "machine-learning",
    "time-series",
    "time-series-analysis",
    "time-series-classification",
    "time-series-regression",
]
authors = [
    { email = "wilsonrljr@outlook.com" },
    { name = "Wilson Rocha Lacerda Junior" },
]
maintainers = [
    { name = "Wilson Rocha Lacerda Junior", email = "wilsonrljr@outlook.com" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Operating System :: OS Independent",
]

dependencies = ["numpy>=1.19.2,<2.0", "scipy>=1.8.0", "matplotlib>=3.3.2"]

dynamic = ["version"]

[project.optional-dependencies]

dev = [
    "pytest >=7.0.0,<8.0.0",
    "pytest-cov >=2.12.0,<4.0.0",
    "flake8 >=3.8.3,<7.0.0",
    "black >= 23.3.0",
    "isort >=5.0.6,<6.0.0",
    "pre-commit",
    "ruff >=0.2.2,<3.0.0",
]

examples = ["scikit-learn", "catboost"]

docs = [
    "mkdocs >=1.1.2,<2.0.0",
    "mkdocs-material >=8.1.4,<=9.6.6",
    "mdx-include >=1.4.1,<2.0.0",
    "mkdocs-markdownextradata-plugin >=0.1.7,<=0.2.6",
    # TODO: upgrade and enable typer-cli once it supports Click 8.x.x
    # "typer-cli >=0.0.12,<0.0.13",
    "typer >=0.4.1,<0.5.0",
    "pyyaml >=5.3.1,<7.0.0",
    "mkdocstrings[python]>=0.25.2, <0.29",
    "mkdocs-redirects>=1.2.0",
    "mkdocs-minify-plugin<=0.8.0",
    "mkdocs-glightbox <= 0.4.0",
    "mkdocs-jupyter<=0.25.1",
    "mkdocs-autorefs>=1.3.1",
    # avoid jinja import error using 3.0.3 version
    "jinja2>=3.0.3",
    "mkdocs-static-i18n[material]==1.3.0"
]
all = ["torch >=1.7.1, <2.4.0"]

[project.urls]
homepage = "http://sysidentpy.org"
documentation = "http://sysidentpy.org/"
repository = "https://github.com/wilsonrljr/sysidentpy"
changelog = "https://github.com/wilsonrljr/sysidentpy/blob/master/CHANGELOG"

[tool.setuptools]
packages = ["sysidentpy"]

[tool.setuptools.dynamic]
version = { attr = "sysidentpy.__version__" }

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers", "--cov=sysidentpy"]
xfail_strict = true
junit_family = "xunit2"

[tool.coverage.paths]
source = ["sysidentpy"]

[tool.coverage.run]
source = ["sysidentpy"]
disable_warnings = ['no-data-collected']

[tool.coverage.report]
omit = [
    "sysidentpy/utils/plotting.py",
    "sysidentpy/basis_function/tests/*",
    "sysidentpy/tests/*",
    "sysidentpy/general_estimators/tests/*",
    "sysidentpy/metaheuristics/tests/*",
    "sysidentpy/metrics/tests/*",
    "sysidentpy/model_structure_selection/tests/*",
    "sysidentpy/parameter_estimation/tests/*",
    "sysidentpy/residues/tests/*",
    "sysidentpy/simulation/tests/*",
]
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.black]
line-length = 88
target_version = ["py38", "py39", "py310", "py311", "py312"]
preview = true
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | paper
  | examples
  | images
  | build
  | dist
  | docs/*
)/
'''

[tool.ruff]
line-length = 88

[tool.ruff.lint]
unfixable = []
select = [
    "D",      # docstring conventions
    "F",      # pyflakes
    "E",      # pycodestyle erros
    "W",      # pycodestyle warnings
    "YTT",    # flake8-2020
    "B",      # flake8-bugbear
    "Q",      # flake8-quotes
    "T10",    # flake8-debugger
    "INT",    # flake8-gettext
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PIE",    # misc lints
    "PYI",    # flake8-pyi
    "TID",    # tidy imports
    "ISC",    # implicit string concatenation
    "TCH",    # type-checking imports
    "C4",     # comprehensions
    "PGH",    # pygrep-hooks
    "RUF",    # Ruff-specific rules
    "S102",   # flake8-bandit: exec-builtin
    "NPY002", # numpy-legacy-random
    "PERF",   # Perflint
    "FLY",    # flynt
    "G",      # flake8-logging-format
    "FA",     # flake8-future-annotations
]
extend-ignore = [
    "B008",    # do not perform function calls in argument defaults
    "W191",    # indentation contains tabs
    "TID252",  # Prefer absolute imports over relative imports from parent modules
    "PLR0913", # too many arguments in function
    "G004",    # logging statement uses f-string (to be defined)
    "PERF203", # try-except within a loop
    "RUF010",  # use explicit conversion flag
    "PLR2004", # magic value used in comparison
    "D100",    # Missing docstring in public module
    "D103",    # Missing docstring in public function
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D104",    # Missing docstring in public package
    "C416",    # Unnecessary list comprehension
    "F401",    # import but unused
    "NPY002",  # Replace legacy np.random.rand
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "RUF005",  # Collection literal concatenation
]
# D100, D101, D102 e D103 são recomendadas durante o desenvolvimento para lembrar
# os usuários de comentar o código!

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

ignore-init-module-imports = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "numpy"
